{"version":3,"sources":["../src/index.js"],"names":["ujoInit","web3Provider","dataStorageProvider","opts","web3","Web3","storageProvider","Oracle","test","TestOracle","USDETHOracle","getWeb3","getStorageProvider","getOracleAddress","Promise","resolve","reject","eth","net","getId","err","networkId","getExchangeRate","oracleAddress","oracleInstance","Contract","abi","methods","getUintPrice","call","exchangeRate","toString","getAccounts","accounts","getNetwork","getBlockNumber","result","getTransactionReceipt","txHash"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\n\nimport { USDETHOracle, TestOracle } from '../../contracts-oracle';\nimport { getContractAddress } from '../../utils';\n\nimport ujoStorage from './ujoStorage';\n\nexport default function ujoInit(web3Provider, dataStorageProvider, opts = {}) {\n  // TODO: add network validations (rinkeby or mainnet)\n  const web3 = new Web3(web3Provider);\n  const storageProvider = ujoStorage(dataStorageProvider);\n  const Oracle = opts.test ? TestOracle : USDETHOracle;\n  return {\n    // returns the web3 instance\n    getWeb3: () => web3,\n    getStorageProvider: () => storageProvider,\n    getOracleAddress: () =>\n      new Promise((resolve, reject) => {\n        web3.eth.net.getId((err, networkId) => {\n          if (err) reject(err);\n          else resolve(getContractAddress(Oracle, networkId));\n        });\n      }),\n    getExchangeRate: () =>\n      new Promise((resolve, reject) => {\n        web3.eth.net.getId(async (err, networkId) => {\n          if (err) reject(err);\n          try {\n            const oracleAddress = getContractAddress(Oracle, networkId);\n            const oracleInstance = new web3.eth.Contract(Oracle.abi, oracleAddress);\n            const exchangeRate = await oracleInstance.methods.getUintPrice().call();\n            resolve(exchangeRate.toString(10));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }),\n    // return the accounts given by the provider\n    getAccounts: () =>\n      new Promise((resolve, reject) => {\n        web3.eth.getAccounts((err, accounts) => {\n          if (err) reject(err);\n          else resolve(accounts);\n        });\n      }),\n    // returns the network id\n    getNetwork: () =>\n      new Promise((resolve, reject) => {\n        web3.eth.net.getId((err, networkId) => {\n          if (err) reject(err);\n          else resolve(networkId);\n        });\n      }),\n    getBlockNumber: () =>\n      new Promise((resolve, reject) => {\n        web3.eth.getBlockNumber((err, result) => {\n          if (err) reject(err);\n          resolve(result);\n        });\n      }),\n    /**\n     * Determines the ethereum block to begin event log search from\n     *\n     * @param {string} param - txHash of the transaction to check.\n     * returns modified version of https://web3js.readthedocs.io/en/1.0/web3-eth.html#eth-gettransactionreceipt-return\n     */\n    getTransactionReceipt: async txHash =>\n      new Promise((resolve, reject) => {\n        web3.eth.getTransactionReceipt(txHash, (err, result) => {\n          if (err) reject(err);\n          resolve(result);\n        });\n      }),\n  };\n}\n"],"file":"index.js"}